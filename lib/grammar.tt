grammar Scheme
  rule program
    expression+ {
      def eval(env={})
        elements.map {|e| e.eval(env)}.last
      end
    }
  end

  rule expression
    space atom space {
      def eval(env={})
        atom.eval(env)
      end
    }
  end

  rule atom
    list / integer / string / identifier
  end

  rule list
    '(' expression* ')' {
      def eval(env={})
        inner_expr = elements[1]

        fn = inner_expr.elements.first.eval(env)
        args = inner_expr.elements[1..-1]

        fn.apply env, *args
      end
    }
  end

  rule identifier
    (!delim .)+ {
      def eval(env={})
        if env.member? text_value
          env[text_value]
        else
          raise "Variable \"#{text_value}\" is not bound."
        end
      end
    }
  end

  rule integer
    ('0' / [1-9] [0-9]*) {
      def eval(env={})
        text_value.to_i
      end
    }
  end

  rule string
    '"' inner:('\\"' / [^"])* '"' {
      def eval(env={})
        inner.text_value.gsub(/\\"/, '"')
      end
    }
  end

  rule delim
    ws / paren
  end

  rule paren
    [\(\)]
  end

  rule space
    ws*
  end

  rule ws
    [ \t\n]
  end
end
