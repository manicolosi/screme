grammar Screme
  rule program
    expression+ <Parser::Program>
  end

  rule expression
    ignored*
    expr:(quoted / list / atom)
    ignored* <Parser::Expression>
  end

  rule quoted
    quote:("'" / "`" / ",@" / ",") expression <Parser::Quoted>
  end

  rule list
    '(' exprs:expression* ')' <Parser::List>
  end

  rule atom
    datum / identifier
  end

  rule datum
    datum:(boolean / number / string) !(!delim .) <Parser::Datum>
  end

  rule boolean
    hash ('t' / 'f') <Parser::Boolean>
  end

  rule number
    rational / integer
  end

  rule integer
    '-'? ('0' / [1-9]) digit* <Parser::Integer>
  end

  rule rational
    digit+ '/' digit+ <Parser::Rational>
  end

  rule string
    '"' ('\\"' / [^"])* '"' <Parser::String>
  end

  rule identifier
    (!delim .)+ <Parser::Identifier>
  end

  rule ignored
    whitespace / comment
  end

  rule whitespace
    space / newline
  end

  rule delim
    whitespace / paren
  end

  rule comment
    ';' (!newline .)*
  end

  rule digit
    [0-9]
  end

  rule hash
    '#'
  end

  rule space
    [\s\t]
  end

  rule newline
    [\n\r]
  end

  rule paren
    [\(\)]
  end
end
